rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isUserInChat(chatId) {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/chats/$(chatId)) &&
        request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
    }

    // Keep open access for assignments (as requested)
    match /assignments/{assignment} {
      allow read, write: if true;
    }

    // Student-specific rules
    match /students/{userId} {
      // Allow reading basic profile info for connection requests
      allow read: if request.auth != null;
      // But only allow full access to own document
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Teacher-specific rules
    match /teachers/{userId} {
      // Allow reading basic profile info for connection requests
      allow read: if request.auth != null;
      // But only allow full access to own document
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // User profiles and settings
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Optional: Shared resources that both can access
    match /resources/{resourceId} {
      allow read: if request.auth != null;
      allow write: if false; // Or your custom logic for who can write
    }

    // Chat messages
    match /messages/{messageId} {
      allow read: if isAuthenticated() && isUserInChat(resource.data.chatId);
      allow create: if isAuthenticated() && isUserInChat(request.resource.data.chatId) && 
                   request.auth.uid == request.resource.data.senderId;
      allow update: if isAuthenticated() && isUserInChat(resource.data.chatId) &&
                   (request.auth.uid == resource.data.senderId || 
                    request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isRead']));
      allow delete: if isAuthenticated() && isUserInChat(resource.data.chatId) && 
                   request.auth.uid == resource.data.senderId;
    }

    // Chat rooms
    match /chats/{chatId} {
      allow read: if isAuthenticated() && request.auth.uid in resource.data.participants;
      allow create: if isAuthenticated() && request.auth.uid in request.resource.data.participants;
      allow update: if isAuthenticated() && request.auth.uid in resource.data.participants;
      allow delete: if isAuthenticated() && request.auth.uid in resource.data.participants;
    }

    // Connections collection rules
    match /connections/{connectionId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
                    request.resource.data.senderId == request.auth.uid &&
                    request.resource.data.status == 'pending';
      allow update: if isAuthenticated() && 
                    (resource.data.receiverId == request.auth.uid || 
                     resource.data.senderId == request.auth.uid);
      allow delete: if isAuthenticated() && 
                    (resource.data.senderId == request.auth.uid || 
                     resource.data.receiverId == request.auth.uid);
    }
  }
}

service firebase.storage {
  match /b/{bucket}/o {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isUserInChat(chatId) {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/chats/$(chatId)) &&
             request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
    }

    // Profile pictures - specific rules
    match /profile-pictures/{userId}/{allPaths=**} {
      allow read: if isAuthenticated();  // Any authenticated user can view profile pictures
      allow write: if isAuthenticated() && request.auth.uid == userId;  // Only user can upload their own picture
    }

    // Chat attachments and files
    match /chat/{chatId}/{allPaths=**} {
      allow read: if isUserInChat(chatId);
      allow write: if isUserInChat(chatId) && 
                   request.resource.size < 10 * 1024 * 1024 &&  // 10MB file size limit
                   request.resource.contentType.matches('image/.*|video/.*|application/pdf');  // Restrict file types
    }

    // Assignment files
    match /assignments/{assignmentId}/{allPaths=**} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && 
                   request.resource.size < 20 * 1024 * 1024;  // 20MB file size limit
    }

    // Deny access to all other files by default
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
} 