import React, { useState, useEffect, useMemo } from 'react';
import {
  FolderIcon,
  ClipboardDocumentIcon,
  ChartBarIcon,
  MegaphoneIcon,
  AcademicCapIcon,
  GlobeAltIcon,
  PresentationChartLineIcon,
  ChatBubbleLeftRightIcon,
  DocumentMagnifyingGlassIcon,
  VideoCameraIcon,
  EnvelopeIcon,
  SparklesIcon,
  XMarkIcon,
  Bars3Icon,
  EyeIcon,
  UsersIcon,
  ChevronLeftIcon,
  ArrowLeftOnRectangleIcon,
  Cog6ToothIcon,
  UserCircleIcon,
} from '@heroicons/react/24/outline';
import { UserGroupIcon as SolidUserGroupIcon } from '@heroicons/react/24/solid';
import { Link } from 'react-router-dom';
import axios from 'axios';

// Firebase Imports
import { db, auth } from '../../firebase/firebaseConfig';
import {
  collection,
  addDoc,
  getDocs,
  query,
  where,
  doc,
  serverTimestamp,
  orderBy,
} from 'firebase/firestore';
import { onAuthStateChanged, signOut } from 'firebase/auth';
import { useNavigate } from 'react-router-dom';

const GEMINI_API_KEY = import.meta.env.VITE_GEMINI_API_KEY;
const GEMINI_API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${GEMINI_API_KEY}`;

const generateQuestionsWithGemini = async ({ subject, topics, numQuestions, difficulty }) => {
  const prompt = `
Generate ${numQuestions} multiple-choice questions for the subject "${subject}".
Topics: ${topics}
Difficulty: ${difficulty}
Each question object must have the following structure:
{
  "text": "The question itself as a string.",
  "options": ["Option A as string", "Option B as string", "Option C as string", "Option D as string"],
  "correctAnswer": "The correct answer, which must be one of the strings from the options array."
}
Ensure the options array always contains 4 distinct string options.
The output must be a valid JSON array of these question objects.
For example:
[
  {
    "text": "What is the capital of France?",
    "options": ["Paris", "Berlin", "Madrid", "Rome"],
    "correctAnswer": "Paris"
  }
]
`;

  if (!GEMINI_API_KEY) {
    console.error("Gemini API Key is not set. Please check your .env file.");
    throw new Error("Gemini API Key is not configured.");
  }

  const body = {
    contents: [{ parts: [{ text: prompt }] }],
    generationConfig: {
      responseMimeType: "application/json",
    },
  };

  try {
    const response = await axios.post(GEMINI_API_URL, body, {
      headers: { 'Content-Type': 'application/json' },
    });

    if (response.data.error) throw new Error(`Gemini API Error: ${response.data.error.message || 'Unknown error'}`);
    if (response.data.promptFeedback?.blockReason) throw new Error(`Prompt blocked by AI: ${response.data.promptFeedback.blockReason}.`);
    if (!response.data.candidates?.length) throw new Error('No content generated by AI.');

    const candidate = response.data.candidates[0];
    if (candidate.finishReason && !["STOP", "MAX_TOKENS"].includes(candidate.finishReason)) {
      let reasonMessage = `AI generation issue: ${candidate.finishReason}.`;
      if (candidate.finishReason === "SAFETY" || !candidate.content?.parts?.length) throw new Error(reasonMessage);
    }

    const textPart = candidate?.content?.parts?.[0]?.text;
    if (!textPart) throw new Error('No text content found in AI response.');

    const parsedData = JSON.parse(textPart);
    if (!Array.isArray(parsedData)) throw new Error('AI response was not in JSON array format.');

    return parsedData.map((q, i) => {
      const defaultOptions = ["Option A", "Option B", "Option C", "Option D"];
      let isMalformed = false;
      let text = q.text;
      let options = q.options;
      let correctAnswer = q.correctAnswer;

      if (typeof q.text !== 'string') { text = "Error: AI text missing."; isMalformed = true; }
      if (!Array.isArray(q.options) || q.options.length < 2 || !q.options.every(opt => typeof opt === 'string')) {
        options = [...defaultOptions]; isMalformed = true;
      }
      if (options.length < 4) options = [...options, ...defaultOptions.slice(options.length)].slice(0, 4);
      if (typeof q.correctAnswer !== 'string' || !options.includes(q.correctAnswer)) {
        correctAnswer = options[0]; isMalformed = true;
      }
      return { id: `q${i + 1}`, text, options, correctAnswer, ...(isMalformed && { isMalformed: true }) };
    });
  } catch (error) {
    console.error('Error in generateQuestionsWithGemini:', error);
    const message = error.message || 'An unexpected error occurred while generating questions.';
    if (axios.isAxiosError(error) && error.response?.data?.error?.message) {
      throw new Error(`API request failed (${error.response.status}): ${error.response.data.error.message}`);
    }
    throw new Error(message);
  }
};

const TeacherTests = () => {
  const [currentUser, setCurrentUser] = useState(null);
  const [currentView, setCurrentView] = useState('dashboard');
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [newTest, setNewTest] = useState({
    title: '', subject: '', topics: '', difficulty: 'Easy', numQuestions: 5, timeLimit: 30, questions: [],
  });
  const [createdTests, setCreatedTests] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [showSubmissionsModal, setShowSubmissionsModal] = useState(false);
  const [viewingTestSubmissions, setViewingTestSubmissions] = useState(null);
  const [submissionsData, setSubmissionsData] = useState([]);
  const [submissionsLoading, setSubmissionsLoading] = useState(false);
  const navigate = useNavigate();

  const educatorSidebarMenu = [
    { title: 'Dashboard', Icon: PresentationChartLineIcon, link: '/educator-dashboard', current: false },
    { title: 'Assignments', Icon: ClipboardDocumentIcon, link: '/assignment-management', current: false },
    { title: 'Tests', Icon: ClipboardDocumentIcon, link: '/teacher-tests', current: true },
    { title: 'Grades & Analytics', Icon: AcademicCapIcon, link: '/GradesAndAnalytics', current: false },
    { title: 'Resources', Icon: FolderIcon, link: '/resource-management', current: false },
    { title: 'Attendance', Icon: ChartBarIcon, link: '/attendance-tracking', current: false },
    { title: 'Teacher Insights', Icon: DocumentMagnifyingGlassIcon, link: '/personalized-feedback-educators' },
    { title: 'Voice Chat', Icon: ChatBubbleLeftRightIcon, link: '/teacher-voice-chat', current: false },
    { title: 'AI Chatbot (Ask Sparky)', Icon: ChatBubbleLeftRightIcon, link: '/chatbot-education', current: false },
    { title: 'AI Questions', Icon: SparklesIcon, link: '/ai-generated-questions', current: false },
    { title: 'Social / Chat', Icon: SolidUserGroupIcon, link: '/chat-functionality', current: false },
    { title: 'Educational News', Icon: GlobeAltIcon, link: '/educational-news', current: false },
    { title: 'Student Suggestions', Icon: EnvelopeIcon, link: '/suggestions-to-students', current: false },
    { title: 'Meetings & Conferences', Icon: VideoCameraIcon, link: '/meeting-host', current: false },
    { title: 'Announcements', Icon: MegaphoneIcon, link: '/announcements', current: false },
    { title: 'Upgrade to Pro', Icon: SparklesIcon, link: '/pricing', current: false, special: true },
  ];

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, (user) => {
      if (user) {
        setCurrentUser(user);
        fetchTeacherTests(user.uid);
      } else {
        setCurrentUser(null);
        setCreatedTests([]);
        console.log("No user logged in for TeacherTests.");
        navigate('/login');
      }
    });
    return () => unsubscribe();
  }, [navigate]);

  const fetchTeacherTests = async (teacherId) => {
    if (!teacherId) return;
    setLoading(true);
    try {
      const testsRef = collection(db, 'tests');
      const q = query(testsRef, where('teacherId', '==', teacherId), orderBy('createdAt', 'desc'));
      const querySnapshot = await getDocs(q);
      const testsList = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
      setCreatedTests(testsList);
    } catch (e) {
      console.error("Error fetching tests: ", e);
      setError("Failed to load your tests. Please try again.");
    } finally {
      setLoading(false);
    }
  };

  const handleCreateTestView = () => {
    setCurrentView('createTest');
    setError('');
    setNewTest({
      title: '', subject: '', topics: '', difficulty: 'Easy', numQuestions: 5, timeLimit: 30, questions: [],
    });
  };

  const handleGenerateQuestions = async () => {
    if (!newTest.subject || !newTest.topics || !newTest.title) {
      setError('Please fill in Test Title, Subject, and Topics before generating questions.');
      return;
    }
    setLoading(true);
    setError('');
    try {
      const questions = await generateQuestionsWithGemini({
        subject: newTest.subject,
        topics: newTest.topics,
        numQuestions: newTest.numQuestions,
        difficulty: newTest.difficulty,
      });
      setNewTest(prev => ({ ...prev, questions }));
      setCurrentView('review');
    } catch (e) {
      console.error("Error generating questions:", e);
      setError(e.message || 'Failed to generate questions. Please check console for details.');
    } finally {
      setLoading(false);
    }
  };

  const handleEditQuestion = (questionIndex, field, value) => {
    const updatedQuestions = [...newTest.questions];
    const questionToUpdate = { ...updatedQuestions[questionIndex] };
    questionToUpdate[field] = value;
    updatedQuestions[questionIndex] = questionToUpdate;
    setNewTest(prev => ({ ...prev, questions: updatedQuestions }));
  };

  const handleEditOption = (questionIndex, optionIndex, newValue) => {
    const updatedQuestions = [...newTest.questions];
    const questionToUpdate = { ...updatedQuestions[questionIndex] };
    const newOptions = [...questionToUpdate.options];
    const oldOptionValue = newOptions[optionIndex];
    newOptions[optionIndex] = newValue;
    questionToUpdate.options = newOptions;
    if (questionToUpdate.correctAnswer === oldOptionValue) {
      questionToUpdate.correctAnswer = newValue;
    }
    updatedQuestions[questionIndex] = questionToUpdate;
    setNewTest(prev => ({ ...prev, questions: updatedQuestions }));
  };

  const handleSaveAndPublishTest = async () => {
    if (!currentUser) {
      setError('You must be logged in to publish a test.');
      return;
    }
    if (!newTest.title || !newTest.subject || !newTest.questions.length) {
      alert('Please fill in all required fields and ensure questions are generated and reviewed.');
      return;
    }
    for (const q of newTest.questions) {
      if (!q.options.includes(q.correctAnswer)) {
        alert(`Question "${q.text.substring(0,30)}..." has an invalid correct answer. Please review.`);
        return;
      }
    }

    setLoading(true);
    setError('');
    try {
      const testToSave = {
        teacherId: currentUser.uid,
        title: newTest.title,
        subject: newTest.subject,
        topics: newTest.topics,
        difficulty: newTest.difficulty,
        numQuestions: newTest.questions.length,
        timeLimit: parseInt(newTest.timeLimit, 10) || 30,
        questions: newTest.questions,
        status: 'published',
        createdAt: serverTimestamp(),
        publishedAt: serverTimestamp(),
        description: `A test on ${newTest.subject} covering ${newTest.topics}.`,
      };
      const docRef = await addDoc(collection(db, 'tests'), testToSave);
      setCreatedTests(prev => [{ id: docRef.id, ...testToSave, createdAt: new Date() }, ...prev]);
      setCurrentView('dashboard');
      setNewTest({
        title: '', subject: '', topics: '', difficulty: 'Easy', numQuestions: 5, timeLimit: 30, questions: [],
      });
      alert('Test published successfully!');
    } catch (e) {
      console.error("Error publishing test: ", e);
      setError("Failed to publish test. " + e.message);
    } finally {
      setLoading(false);
    }
  };

  const handleViewSubmissions = async (test) => {
    if (!test || !test.id) return;
    setViewingTestSubmissions(test);
    setShowSubmissionsModal(true);
    setSubmissionsLoading(true);
    setSubmissionsData([]);
    try {
      const submissionsRef = collection(db, 'testSubmissions');
      const q = query(submissionsRef, where('testId', '==', test.id), orderBy('submittedAt', 'desc'));
      const querySnapshot = await getDocs(q);
      const subs = querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
        submittedAt: doc.data().submittedAt?.toDate ? doc.data().submittedAt.toDate() : new Date(),
      }));
      setSubmissionsData(subs);
    } catch (e) {
      console.error("Error fetching submissions: ", e);
      setError("Failed to load submissions for this test.");
    } finally {
      setSubmissionsLoading(false);
    }
  };

  const handleLogout = async () => {
    try {
      await signOut(auth);
      localStorage.removeItem('profileUser');
      navigate('/login');
    } catch (error) {
      console.error('Error logging out:', error);
    }
  };

  const SubmissionsModal = useMemo(() => {
    if (!showSubmissionsModal || !viewingTestSubmissions) return null;

    return (
      <div className="fixed inset-0 bg-black/70 backdrop-blur-sm flex items-center justify-center z-[60] p-4">
        <div className="bg-slate-800 rounded-xl p-6 sm:p-8 w-full max-w-3xl relative max-h-[90vh] overflow-y-auto shadow-2xl border border-slate-700">
          <button
            onClick={() => setShowSubmissionsModal(false)}
            className="absolute top-4 right-4 text-slate-400 hover:text-white transition-colors"
          >
            <XMarkIcon className="w-7 h-7" />
          </button>
          <h3 className="text-2xl sm:text-3xl font-bold mb-2 text-white">
            Student Attempts for:
          </h3>
          <p className="text-xl text-indigo-400 mb-6">{viewingTestSubmissions.title}</p>

          {submissionsLoading ? (
            <div className="flex flex-col justify-center items-center h-40">
              <svg className="animate-spin h-10 w-10 text-indigo-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
              <p className="mt-4 text-lg text-slate-300">Loading submissions...</p>
            </div>
          ) : submissionsData.length === 0 ? (
            <div className="text-center py-12 text-slate-400">
              <UsersIcon className="w-16 h-16 mx-auto text-slate-500 mb-4" />
              <p className="text-xl font-medium">No students have attempted this test yet.</p>
            </div>
          ) : (
            <div className="space-y-3">
              {submissionsData.map(sub => (
                <div key={sub.id} className="bg-slate-700/50 p-4 rounded-lg shadow-md transition-all hover:bg-slate-700/80">
                  <div className="flex flex-col sm:flex-row justify-between sm:items-center gap-2">
                    <div>
                      <p className="text-lg font-semibold text-white">{sub.studentName || `Student ID: ${sub.studentId.substring(0,8)}...`}</p>
                      <p className="text-xs text-slate-400">
                        Attempted: {sub.submittedAt.toLocaleString()}
                      </p>
                    </div>
                    <div className="text-right">
                      <p className="text-xl font-bold text-green-400">{sub.score}%</p>
                      <p className="text-xs text-slate-300">({sub.correctCount}/{sub.totalQuestionsInTest} correct)</p>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
          <div className="mt-8 flex justify-end">
            <button
              type="button"
              onClick={() => setShowSubmissionsModal(false)}
              className="px-6 py-2.5 rounded-lg bg-slate-600 hover:bg-slate-500 transition-colors text-white font-medium"
            >
              Close
            </button>
          </div>
        </div>
      </div>
    );
  }, [showSubmissionsModal, viewingTestSubmissions, submissionsData, submissionsLoading]);

  const renderContent = () => {
    switch (currentView) {
      case 'createTest':
        return (
          <div className="p-6 bg-slate-800/60 backdrop-blur-sm border border-slate-700/50 rounded-lg shadow-lg">
            <h2 className="text-2xl font-semibold mb-6 text-white">Create New Test</h2>
            {error && <div className="mb-4 p-3 bg-red-900/50 border border-red-700 text-red-300 rounded-md">{error}</div>}
            <div className="space-y-6">
              <div>
                <label className="block text-sm font-medium text-slate-300 mb-2">Test Title</label>
                <input type="text" value={newTest.title} onChange={e => setNewTest(prev => ({ ...prev, title: e.target.value }))} className="w-full px-4 py-2 bg-slate-700/50 border border-slate-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-indigo-500" placeholder="Enter test title" />
              </div>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-slate-300 mb-2">Subject</label>
                  <input type="text" value={newTest.subject} onChange={e => setNewTest(prev => ({ ...prev, subject: e.target.value }))} className="w-full px-4 py-2 bg-slate-700/50 border border-slate-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-indigo-500" placeholder="Enter subject" />
                </div>
                <div>
                  <label className="block text-sm font-medium text-slate-300 mb-2">Time Limit (minutes)</label>
                  <input type="number" value={newTest.timeLimit} min={5} max={180} onChange={e => setNewTest(prev => ({ ...prev, timeLimit: e.target.value }))} className="w-full px-4 py-2 bg-slate-700/50 border border-slate-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-indigo-500" />
                </div>
              </div>
              <div>
                <label className="block text-sm font-medium text-slate-300 mb-2">Topics (comma separated)</label>
                <textarea value={newTest.topics} onChange={e => setNewTest(prev => ({ ...prev, topics: e.target.value }))} className="w-full px-4 py-2 bg-slate-700/50 border border-slate-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-indigo-500" rows="2" placeholder="e.g. Algebra, Equations, Graphs" />
              </div>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-slate-300 mb-2">Difficulty</label>
                  <select value={newTest.difficulty} onChange={e => setNewTest(prev => ({ ...prev, difficulty: e.target.value }))} className="w-full px-4 py-2 bg-slate-700/50 border border-slate-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-indigo-500">
                    <option value="Easy">Easy</option> <option value="Medium">Medium</option> <option value="Hard">Hard</option>
                  </select>
                </div>
                <div>
                  <label className="block text-sm font-medium text-slate-300 mb-2">Number of Questions</label>
                  <input type="number" value={newTest.numQuestions} min={1} max={20} onChange={e => setNewTest(prev => ({ ...prev, numQuestions: parseInt(e.target.value) }))} className="w-full px-4 py-2 bg-slate-700/50 border border-slate-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-indigo-500" />
                </div>
              </div>
              <div className="flex justify-end gap-4 pt-4">
                <button onClick={() => setCurrentView('dashboard')} className="px-6 py-2 bg-slate-600 text-white rounded-md hover:bg-slate-500 transition-colors duration-200">Cancel</button>
                <button onClick={handleGenerateQuestions} disabled={loading} className="px-6 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 transition-colors duration-200 disabled:opacity-60 disabled:cursor-not-allowed">{loading ? 'Generating...' : 'Generate Questions'}</button>
              </div>
            </div>
          </div>
        );
      case 'review':
        return (
          <div className="p-6 bg-slate-800/60 backdrop-blur-sm border border-slate-700/50 rounded-lg shadow-lg">
            <h2 className="text-2xl font-semibold mb-6 text-white">Review & Edit Questions</h2>
            {error && <div className="mb-4 p-3 bg-red-900/50 border border-red-700 text-red-300 rounded-md">{error}</div>}
            {newTest.questions.length === 0 && !loading && (
              <p className="text-slate-400 text-center py-4">No questions were generated. You might need to adjust your prompt or try again.</p>
            )}
            <div className="space-y-8">
              {newTest.questions.map((q, questionIndex) => (
                <div key={q.id || `q-${questionIndex}`} className="p-4 bg-slate-800/40 border border-slate-700/50 rounded-lg">
                  {q.isMalformed && <p className="text-yellow-400 text-sm mb-2 p-2 bg-yellow-900/30 border border-yellow-700 rounded">Warning: AI may have had trouble forming this question. Please review carefully.</p>}
                  <label className="block text-sm font-medium text-slate-300 mb-1">Question {questionIndex + 1}</label>
                  <textarea value={q.text} onChange={e => handleEditQuestion(questionIndex, 'text', e.target.value)} rows={3} className="w-full px-4 py-2 mb-3 bg-slate-700/50 border border-slate-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-indigo-500" />
                  <label className="block text-sm font-medium text-slate-300 mb-1 mt-3">Options</label>
                  {q.options.map((option, optionIndex) => (
                    <div key={optionIndex} className="flex items-center mb-2">
                      <span className="mr-2 text-slate-400">{String.fromCharCode(65 + optionIndex)}.</span>
                      <input type="text" value={option} onChange={e => handleEditOption(questionIndex, optionIndex, e.target.value)} className="w-full px-4 py-2 bg-slate-700/50 border border-slate-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-indigo-500" />
                    </div>
                  ))}
                  <label className="block text-sm font-medium text-slate-300 mb-1 mt-4">Correct Answer</label>
                  <select value={q.correctAnswer} onChange={e => handleEditQuestion(questionIndex, 'correctAnswer', e.target.value)} className="w-full px-4 py-2 bg-slate-700/50 border border-slate-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-indigo-500">
                    <option value="" disabled>Select correct answer</option>
                    {q.options.map((opt, optIdx) => (<option key={optIdx} value={opt}>{opt}</option>))}
                  </select>
                  {!q.options.includes(q.correctAnswer) && q.correctAnswer !== "" && (<p className="text-red-400 text-xs mt-1">Warning: Correct answer is not in options.</p>)}
                </div>
              ))}
              <div className="flex justify-end gap-4 pt-4">
                <button onClick={() => { setError(''); setCurrentView('createTest'); }} className="px-6 py-2 bg-slate-600 text-white rounded-md hover:bg-slate-500 transition-colors duration-200">Back to Edit Details</button>
                <button onClick={handleSaveAndPublishTest} disabled={loading || newTest.questions.length === 0} className="px-6 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors duration-200 disabled:opacity-60 disabled:cursor-not-allowed">{loading ? 'Publishing...' : 'Save & Publish Test'}</button>
              </div>
            </div>
          </div>
        );
      case 'dashboard':
      default:
        return (
          <div className="py-5">
            <h2 className="text-3xl font-bold mb-8 text-white text-center md:text-left">Teacher Dashboard - Tests</h2>
            {error && <div className="mb-4 p-3 bg-red-900/50 border border-red-700 text-red-300 rounded-md">{error}</div>}
            <div className="mt-8 p-6 bg-slate-800/60 backdrop-blur-sm border border-slate-700/50 rounded-lg shadow-lg text-left">
              <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 gap-4">
                <h3 className="text-2xl font-semibold text-white">Created & Published Tests</h3>
                <button onClick={handleCreateTestView} className="px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 transition-colors duration-200 w-full sm:w-auto">Create New Test</button>
              </div>
              {loading && <p className="text-slate-400 text-center py-4">Loading tests...</p>}
              {!loading && createdTests.length === 0 ? (
                <p className="text-slate-400 text-center py-4">No tests created yet. Click "Create New Test" to get started!</p>
              ) : (
                <ul className="list-none p-0 space-y-4">
                  {createdTests.map(test => (
                    <li key={test.id} className="p-4 border border-slate-700/50 bg-slate-800/40 rounded-md shadow-sm hover:bg-slate-800/60 transition-colors duration-150">
                      <div className="flex flex-col md:flex-row justify-between items-start md:items-center">
                        <div className="flex-grow mb-3 md:mb-0">
                          <h4 className="text-lg font-semibold text-indigo-300">{test.title}</h4>
                          <p className="text-sm text-slate-400">
                            {test.subject} | {test.difficulty} | {test.numQuestions || test.questions?.length} Qs | {test.timeLimit} mins
                          </p>
                          <p className="text-xs text-slate-500 mt-1">
                            Published: {test.publishedAt?.toDate ? test.publishedAt.toDate().toLocaleDateString() : 'N/A'}
                          </p>
                        </div>
                        <button
                          onClick={() => handleViewSubmissions(test)}
                          className="flex items-center gap-2 px-4 py-2 bg-teal-600 text-white text-sm rounded-md hover:bg-teal-700 transition-colors duration-200"
                        >
                          <EyeIcon className="w-5 h-5"/> View Attempts
                        </button>
                      </div>
                    </li>
                  ))}
                </ul>
              )}
            </div>
          </div>
        );
    }
  };

  return (
    <div className="font-sans min-h-screen bg-gradient-to-br from-slate-900 via-slate-900 to-gray-900 flex text-slate-100">
      {/* Desktop Sidebar */}
      <aside className={`fixed top-0 left-0 h-screen w-64 bg-slate-800/70 backdrop-blur-2xl border-r border-slate-700/50 transform transition-transform duration-300 ease-in-out ${sidebarOpen ? 'translate-x-0' : '-translate-x-full'} z-50 flex flex-col shadow-2xl lg:translate-x-0`}>
        <div className="p-5 border-b border-slate-700/50">
          <Link to="/educator-dashboard" className="flex items-center gap-3 group">
            <GlobeAltIcon className="w-10 h-10 text-purple-500 group-hover:text-purple-400 transition-all duration-300 transform group-hover:rotate-[20deg] group-hover:scale-110" />
            <h1 className="text-2xl font-bold bg-gradient-to-r from-purple-500 via-pink-500 to-blue-500 bg-clip-text text-transparent group-hover:opacity-90 transition-opacity">
              SPARK-IQ
            </h1>
          </Link>
        </div>
        <nav className="flex-1 overflow-y-auto p-3 space-y-1.5 custom-scrollbar">
          {educatorSidebarMenu.map((item) => (
            <Link
              key={item.title}
              to={item.link}
              className={`group flex items-center gap-3.5 px-4 py-3 text-sm font-medium rounded-lg transition-all duration-200 ease-in-out
                ${item.current 
                  ? 'bg-gradient-to-r from-purple-600 to-blue-600 text-white shadow-lg ring-1 ring-purple-500/60 transform scale-[1.01]' 
                  : item.special 
                    ? 'bg-gradient-to-r from-amber-400 to-orange-500 text-white font-semibold hover:from-amber-500 hover:to-orange-600 shadow-md hover:shadow-lg'
                    : 'text-slate-300 hover:bg-slate-700/60 hover:text-purple-300 hover:shadow-md'
                }`}
            >
              <item.Icon className={`w-5 h-5 flex-shrink-0 ${item.current ? 'text-white' : item.special ? 'text-white/90' : 'text-slate-400 group-hover:text-purple-300'} transition-colors`} />
              <span>{item.title}</span>
            </Link>
          ))}
        </nav>
      </aside>

      {/* Mobile Sidebar */}
      <aside className={`fixed top-0 left-0 h-full w-72 bg-slate-800/95 backdrop-blur-xl border-r border-slate-700/60 transform transition-transform duration-300 ease-in-out z-[60] flex flex-col shadow-2xl ${sidebarOpen ? 'translate-x-0' : '-translate-x-full'} lg:hidden`}>
        <div className="p-5 border-b border-slate-700/60 flex justify-between items-center">
          <Link to="/educator-dashboard" className="flex items-center gap-2.5 group" onClick={() => setSidebarOpen(false)}>
            <GlobeAltIcon className="w-7 h-7 text-purple-400 group-hover:text-purple-300 transition-colors" />
            <h1 className="text-xl font-bold bg-gradient-to-r from-purple-400 via-pink-400 to-blue-400 bg-clip-text text-transparent">SPARK-IQ</h1>
          </Link>
          <button onClick={() => setSidebarOpen(false)} className="p-2 text-slate-400 hover:bg-slate-700/70 rounded-full">
            <ChevronLeftIcon className="w-6 h-6" />
          </button>
        </div>
        <nav className="flex-1 overflow-y-auto p-3 space-y-1 custom-scrollbar">
          {educatorSidebarMenu.map((item) => (
            <Link
              key={item.title}
              to={item.link}
              onClick={() => setSidebarOpen(false)}
              className={`group flex items-center gap-3 px-3.5 py-3 text-sm font-medium rounded-lg transition-colors ${
                item.current ? 'bg-gradient-to-r from-purple-600 to-blue-600 text-white shadow-md' : 'text-slate-200 hover:bg-slate-700/70 hover:text-white'
              }`}
            >
              <item.Icon className={`w-5 h-5 ${item.current ? 'text-white' : 'text-slate-400 group-hover:text-purple-300'}`} />
              {item.title}
            </Link>
          ))}
        </nav>
        <div className="p-4 border-t border-slate-700/60">
          <Link to="/educator-settings" onClick={() => setSidebarOpen(false)} className="group flex items-center gap-2.5 p-2.5 text-sm text-slate-200 hover:bg-slate-700/70 hover:text-purple-300 rounded-lg transition-colors">
            <Cog6ToothIcon className="w-5 h-5 text-slate-400 group-hover:text-purple-300" /> Settings
          </Link>
          <button onClick={handleLogout} className="group flex items-center gap-2.5 w-full mt-1.5 p-2.5 text-sm text-red-400 hover:bg-red-500/20 hover:text-red-300 rounded-lg transition-colors">
            <ArrowLeftOnRectangleIcon className="w-5 h-5 text-red-500 group-hover:text-red-400" /> Logout
          </button>
        </div>
      </aside>
      {sidebarOpen && <div className="fixed inset-0 bg-black/70 backdrop-blur-sm z-50 lg:hidden" onClick={() => setSidebarOpen(false)}></div>}

      {/* Main Content */}
      <div className={`flex-1 overflow-x-hidden overflow-y-auto transition-all duration-300 ${sidebarOpen ? 'lg:ml-64' : 'ml-0'}`}>
        <div className="lg:hidden sticky top-0 z-30 bg-slate-800/80 backdrop-blur-md p-4 border-b border-slate-700 flex items-center justify-between">
          <button type="button" className="rounded-md p-2 text-slate-400 hover:text-white focus:outline-none" onClick={() => setSidebarOpen(true)}>
            <Bars3Icon className="h-6 w-6" />
          </button>
          <h1 className="text-xl font-bold text-white">
            {currentView === 'createTest' ? 'Create Test' : currentView === 'review' ? 'Review Questions' : 'Tests Dashboard'}
          </h1>
          <div></div>
        </div>
        <main className="p-4 md:p-6 w-full max-w-4xl mx-auto">
          {renderContent()}
        </main>
      </div>
      {SubmissionsModal}
    </div>
  );
};

export default TeacherTests;